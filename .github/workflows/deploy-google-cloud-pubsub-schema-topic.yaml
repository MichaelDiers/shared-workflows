name: deploy-google-cloud-pubsub-schema-topic
on:
  workflow_call:
    inputs:
      messageEnconding:
        required: true
        type: string
      schemaFile:
        required: true
        type: string
      schemaType:
        required: true
        type: string
    secrets:
      gcpCredentialsTest:
        required: true
      gcpCredentialsStage:
        required: true
      gcpCredentialsProd:
        required: true
      projectIdTest:
        required: true
      projectIdStage:
        required: true
      projectIdProd:
        required: true
      topicName:
        required: true
jobs:
  test:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS: ${{ secrets.gcpCredentialsTest }}
      MESSAGE_ENCODING: ${{ inputs.messageEnconding }}
      PROJECT_ID: ${{ secrets.projectIdTest }}
      TOPIC_NAME: ${{ secrets.topicName }}_TEST
      SCHEMA_NAME: ${{ secrets.topicName }}_TEST_SCHEMA
      SCHEMA_FILE: ${{ inputs.schemaFile }}
      SCHEMA_TYPE: ${{ inputs.schemaType }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: delete topic
        uses: actions-hub/gcloud@master
        continue-on-error: true
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub topics delete ${{ env.TOPIC_NAME }}
      - name: delete schema
        uses: actions-hub/gcloud@master
        continue-on-error: true
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub schemas delete ${{ env.SCHEMA_NAME }} --quiet
      - name: deploy schema
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub schemas create ${{ env.SCHEMA_NAME }} --type=${{ env.SCHEMA_TYPE }} --definition-file=${{ env.SCHEMA_FILE }}
      - name: deploy topic
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub topics create ${{ env.TOPIC_NAME }} --message-encoding=${{ env.MESSAGE_ENCODING }} --schema=${{ env.SCHEMA_NAME }}
  stage:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    needs: test
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS: ${{ secrets.gcpCredentialsStage }}
      MESSAGE_ENCODING: ${{ inputs.messageEnconding }}
      PROJECT_ID: ${{ secrets.projectIdStage }}
      TOPIC_NAME: ${{ secrets.topicName }}_STAGE
      SCHEMA_NAME: ${{ secrets.topicName }}_STAGE_SCHEMA
      SCHEMA_FILE: ${{ inputs.schemaFile }}
      SCHEMA_TYPE: ${{ inputs.schemaType }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: delete topic
        uses: actions-hub/gcloud@master
        continue-on-error: true
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub topics delete ${{ env.TOPIC_NAME }}
      - name: delete schema
        uses: actions-hub/gcloud@master
        continue-on-error: true
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub schemas delete ${{ env.SCHEMA_NAME }} --quiet
      - name: deploy schema
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub schemas create ${{ env.SCHEMA_NAME }} --type=${{ env.SCHEMA_TYPE }} --definition-file=${{ env.SCHEMA_FILE }}
      - name: deploy topic
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub topics create ${{ env.TOPIC_NAME }} --message-encoding=${{ env.MESSAGE_ENCODING }} --schema=${{ env.SCHEMA_NAME }}
  prod:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    needs: stage
    environment:
      name: production 
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS: ${{ secrets.gcpCredentialsProd }}
      MESSAGE_ENCODING: ${{ inputs.messageEnconding }}
      PROJECT_ID: ${{ secrets.projectIdProd }}
      TOPIC_NAME: ${{ secrets.topicName }}_PROD
      SCHEMA_NAME: ${{ secrets.topicName }}_PROD_SCHEMA
      SCHEMA_FILE: ${{ inputs.schemaFile }}
      SCHEMA_TYPE: ${{ inputs.schemaType }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: delete topic
        uses: actions-hub/gcloud@master
        continue-on-error: true
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub topics delete ${{ env.TOPIC_NAME }}
      - name: delete schema
        uses: actions-hub/gcloud@master
        continue-on-error: true
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub schemas delete ${{ env.SCHEMA_NAME }} --quiet
      - name: deploy schema
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ env.PROJECT_ID }}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub schemas create ${{ env.SCHEMA_NAME }} --type=${{ env.SCHEMA_TYPE }} --definition-file=${{ env.SCHEMA_FILE }}
      - name: deploy topic
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{ env.PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{ env.GCP_CREDENTIALS }}
        with:
          args: pubsub topics create ${{ env.TOPIC_NAME }} --message-encoding=${{ env.MESSAGE_ENCODING }} --schema=${{ env.SCHEMA_NAME }}
  