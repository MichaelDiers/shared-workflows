name: deploy-google-cloud-secret
on:
  workflow_call:
    secrets:
      gcpCredentialsTest:
        required: true
      gcpCredentialsStage:
        required: true
      gcpCredentialsProd:
        required: true
      projectIdTest:
        required: true
      projectIdStage:
        required: true
      projectIdProd:
        required: true
      secretKey:
        required: true
      secretValueTest:
        required: true
      secretValueStage:
        required: true
      secretValueProd:
        required: true
      serviceAccountTest:
        required: true
      serviceAccountStage:
        required: true
      serviceAccountProd:
        required: true
jobs:
  test:
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS: ${{ secrets.gcpCredentialsTest }}
      PROJECT_ID: ${{ secrets.projectIdTest }}
      SECRET_KEY: ${{ secrets.secretKey }}_TEST
      SECRET_VALUE: ${{ secrets.secretValueTest }}
      IAM_ROLE: roles/secretmanager.secretAccessor
      SERVICE_ACCOUNT: ${{ secrets.serviceAccountTest }}
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: delete secret
        continue-on-error: true
        run: 'gcloud secrets delete ${{ env.SECRET_KEY }} --quiet'
      - name: create secret
        run: 'printf "${{ env.SECRET_VALUE }}" | gcloud secrets create ${{ env.SECRET_KEY }} --data-file=-'
      - name: create iam
        run: 'gcloud secrets add-iam-policy-binding ${{ env.SECRET_KEY }} --member=${{ env.serviceAccountTest }} --role \'${{ env.IAM_ROLE }}\''
  stage:
    needs: test
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS: ${{ secrets.gcpCredentialsStage }}
      PROJECT_ID: ${{ secrets.projectIdStage }}
      SECRET_KEY: ${{ secrets.secretKey }}_STAGE
      SECRET_VALUE: ${{ secrets.secretValueStage }}
      IAM_ROLE: roles/secretmanager.secretAccessor
      SERVICE_ACCOUNT: ${{ secrets.serviceAccountStage }}
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: delete secret
        continue-on-error: true
        run: 'gcloud secrets delete ${{ env.SECRET_KEY }} --quiet'
      - name: create secret
        run: 'printf "${{ env.SECRET_VALUE }}" | gcloud secrets create ${{ env.SECRET_KEY }} --data-file=-'
      - name: create iam
        run: 'gcloud secrets add-iam-policy-binding ${{ env.SECRET_KEY }} --member=${{ env.serviceAccountTest }} --role \'${{ env.IAM_ROLE }}\''
  prod:
    needs: stage
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS: ${{ secrets.gcpCredentialsProd }}
      PROJECT_ID: ${{ secrets.projectIdProd }}
      SECRET_KEY: ${{ secrets.secretKey }}_PROD
      SECRET_VALUE: ${{ secrets.secretValueProd }}
      IAM_ROLE: roles/secretmanager.secretAccessor
      SERVICE_ACCOUNT: ${{ secrets.serviceAccountProd }}
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ env.GCP_CREDENTIALS }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      - name: delete secret
        continue-on-error: true
        run: 'gcloud secrets delete ${{ env.SECRET_KEY }} --quiet'
      - name: create secret
        run: 'printf "${{ env.SECRET_VALUE }}" | gcloud secrets create ${{ env.SECRET_KEY }} --data-file=-'
      - name: create iam
        run: 'gcloud secrets add-iam-policy-binding ${{ env.SECRET_KEY }} --member=${{ env.serviceAccountTest }} --role \'${{ env.IAM_ROLE }}\''
